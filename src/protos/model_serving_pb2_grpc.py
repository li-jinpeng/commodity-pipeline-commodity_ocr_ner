# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import model_serving_pb2 as model__serving__pb2


class ModelServingStub(object):
  """*
  @author mayanjun <mayanjun@kuaishou.com>
  @date 2019-08-17
  @desc
  模型的多样性导致各种模型服务的接口特别杂乱，如果一直从模型功能的角度定义接口会让proto永远无法收敛，且会给模型服务的开发维护带来非常大的负担；
  这里参考tensorflow内部一些核心proto的方式，从模型功能无关的角度定义了一个模型预测服务通用的接口，并提供了尽量丰富的数据结构；
  可以满足目前线上大部分模型需求，使用过程中业务侧需要和算法服务侧对齐所使用的字段以及使用方式；
  有什么问题欢迎随时沟通讨论；

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Predict = channel.unary_unary(
        '/mmu.serving.ModelServing/Predict',
        request_serializer=model__serving__pb2.PredictRequest.SerializeToString,
        response_deserializer=model__serving__pb2.PredictResult.FromString,
        )
    self.BatchPredict = channel.unary_unary(
        '/mmu.serving.ModelServing/BatchPredict',
        request_serializer=model__serving__pb2.BatchPredictRequest.SerializeToString,
        response_deserializer=model__serving__pb2.BatchPredictResult.FromString,
        )


class ModelServingServicer(object):
  """*
  @author mayanjun <mayanjun@kuaishou.com>
  @date 2019-08-17
  @desc
  模型的多样性导致各种模型服务的接口特别杂乱，如果一直从模型功能的角度定义接口会让proto永远无法收敛，且会给模型服务的开发维护带来非常大的负担；
  这里参考tensorflow内部一些核心proto的方式，从模型功能无关的角度定义了一个模型预测服务通用的接口，并提供了尽量丰富的数据结构；
  可以满足目前线上大部分模型需求，使用过程中业务侧需要和算法服务侧对齐所使用的字段以及使用方式；
  有什么问题欢迎随时沟通讨论；

  """

  def Predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BatchPredict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModelServingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=model__serving__pb2.PredictRequest.FromString,
          response_serializer=model__serving__pb2.PredictResult.SerializeToString,
      ),
      'BatchPredict': grpc.unary_unary_rpc_method_handler(
          servicer.BatchPredict,
          request_deserializer=model__serving__pb2.BatchPredictRequest.FromString,
          response_serializer=model__serving__pb2.BatchPredictResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mmu.serving.ModelServing', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
